---
interface image {
    width?: number
    height?: number
    src?: string
    format?: any
}

interface Props {
  images: {[key:string]: image}
  alt?: string[],
  slug?: string
}

const {slug, images } = Astro.props;
const spacing = 16
const fullWidth = Object.entries(images).reduce(
  (accumulator, currentImage, index) => {
    const addSpace = index !== 0 ? spacing : 0;
    return accumulator + currentImage[1].width + addSpace
  }
    ,
  0,
);
---


  <div class='w-full img-preview flex flex-col lg:flex-row justify-between gap-y-1' transition:name={"images:"+slug}  >
    {Object.entries(images).map((img)=> 
      <img
      src={img[1].src}
      alt={img[0]}
      height={img[1].height}
      width={img[1].width}
      loading="lazy"
      style=`aspect-ratio:${img[1].width} / ${img[1].height}; --img-preview-width: ${(img[1].width/fullWidth)*100}%`
    />)}
  </div>


<style lang="postcss">
  .img-preview img{
    --img-preview-width: 100%;
    height: auto; 
    @apply w-full lg:w-[var(--img-preview-width)];
  }
  
</style>
